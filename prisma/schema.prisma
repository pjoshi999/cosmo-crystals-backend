// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  name             String
  email            String    @unique
  password         String
  role             Role      @default(CUSTOMER)
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  addresses          Address[]
  orders             Order[]
  reviews            Review[]
  cart               CartItem[]
  sessions           Session[]
  wishList           WishListItem[]
  PasswordResetToken PasswordResetToken?
  newsletter         Newsletter?         @relation(fields: [newsletterId], references: [id])
  newsletterId       String?             @db.Uuid

  @@map("users")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordResetToken {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  token  String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_token")
}

model Address {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String  @db.Uuid
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  phone      String

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("addresses")
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  slug        String? // URL-friendly version of name for SEO and clean URLs
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subCategory SubCategory[]
  products    Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  description   String
  price         Float
  salePrice     Float
  stock         Int      @default(0)
  // weight        Float? //in grams
  // length        Float? // In cm
  // width         Float? // In cm
  // height        Float? // In cm
  categoryId    String   @db.Uuid
  subCategoryId String?  @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])

  images     ProductImage[]
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  attributes ProductAttribute[]
  wishList   WishListItem[]

  @@index([categoryId])
  @@index([subCategoryId])
  @@map("products")
}

model SubCategory {
  id         String   @id @default(uuid()) @db.Uuid
  categoryId String   @db.Uuid
  name       String   @unique
  slug       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("subcategories")
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @db.Uuid
  url       String
  alt       String?
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem   CartItem? @relation(fields: [cartItemId], references: [id])
  cartItemId String?   @db.Uuid

  @@map("product_images")
}

model ProductAttribute {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  value     Json
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
  @@map("product_attributes")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Order {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @db.Uuid
  addressId      String?     @db.Uuid
  totalAmount    Float
  status         OrderStatus @default(PENDING)
  paymentMethod  String
  paymentId      String?     @db.Uuid
  shippingMethod String?
  shippingCost   Float?      @default(0)
  tax            Float?      @default(0)
  discount       Float?      @default(0)
  trackingNumber String?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user    User         @relation(fields: [userId], references: [id])
  address Address?     @relation(fields: [addressId], references: [id])
  items   OrderItem[]
  events  OrderEvent[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderEvent {
  id          String      @id @default(uuid()) @db.Uuid
  orderId     String      @db.Uuid
  status      OrderStatus
  description String?
  createdAt   DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_events")
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  images  ProductImage[]

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishListItem {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Coupon {
  id          String     @id @default(uuid()) @db.Uuid
  code        String     @unique
  type        CouponType
  value       Float
  minSpend    Float?
  maxDiscount Float?
  startDate   DateTime
  endDate     DateTime
  usageLimit  Int?
  usageCount  Int?       @default(0)
  isActive    Boolean    @default(true) // Flag to enable/disable
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("coupons")
}

model Newsletter {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("newsletter")
}

// ENUMS
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
